{
  "accordion": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SAccordion, SCard } from 'soy-ui';\nimport type { AccordionItemData, ThemeSize } from 'soy-ui';\nimport { Earth, Info, Minus, Plus, Rocket } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoAccordion'\n});\n\nconst single = ref('');\nconst single2 = ref('');\nconst single3 = ref('');\nconst multi = ref<string[]>([]);\nconst multi2 = ref<string[]>([]);\n\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\n\nconst items: AccordionItemData[] = [\n  {\n    value: '1',\n    title: 'Is it accessible?',\n    content: 'Yes. It adheres to the WAI-ARIA design pattern.',\n    icon: Info\n  },\n  {\n    value: '2',\n    title: 'Is it unstyled?',\n    content: \"Yes. It's unstyled by default, giving you freedom over the look and feel.\",\n    icon: Rocket\n  },\n  {\n    value: '3',\n    title: 'Can it be animated?',\n    content: 'Yes! You can use the transition prop to configure the animation.',\n    icon: Earth\n  }\n];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Single Collapse\" split>\n      <SAccordion v-model=\"single\" type=\"single\" collapsible :items=\"items\" />\n    </SCard>\n    <SCard title=\"Multi Collapse\" split>\n      <SAccordion v-model=\"multi\" type=\"multiple\" :items=\"items\" />\n    </SCard>\n    <SCard title=\"Single Collapse (always open one)\" split>\n      <SAccordion v-model=\"single2\" type=\"single\" :items=\"items\" />\n    </SCard>\n    <SCard title=\"Custom Styling\" split>\n      <SAccordion\n        v-model=\"single3\"\n        type=\"single\"\n        collapsible\n        :items=\"items\"\n        :ui=\"{\n          item: 'border-b-0',\n          content: 'px-3 leading-8',\n          trigger: `mb-2 rounded-md px-3 text-left underline-offset-2 data-[state=closed]:(bg-muted/50 no-underline) data-[state=open]:(bg-secondary-foreground/20 underline hover:bg-secondary-foreground/20 hover:underline) hover:bg-muted`\n        }\"\n      />\n    </SCard>\n    <SCard title=\"Custom Icon\" split>\n      <SAccordion v-model=\"multi2\" type=\"multiple\" :items=\"items\">\n        <template #trigger-icon=\"{ open }\">\n          <Minus v-if=\"open\" />\n          <Plus v-else />\n        </template>\n      </SAccordion>\n    </SCard>\n    <SCard title=\"Size\" split>\n      <div class=\"flex flex-wrap justify-between gap-4\">\n        <SCard v-for=\"size in sizes\" :key=\"size\" :title=\"size\" split class=\"basis-32% lt-lg:basis-48% lt-sm:basis-100%\">\n          <SAccordion :size=\"size\" :items=\"items\" collapsible />\n        </SCard>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "alert-dialog": "<script setup lang=\"ts\">\nimport { SAlertDialog, SAlertDialogAction, SAlertDialogCancel, SButton, SCard } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoAlertDialog'\n});\n</script>\n\n<template>\n  <SCard title=\"Alert Dialog\">\n    <div class=\"flex-c gap-4\">\n      <SCard title=\"Destructive\" split>\n        <SAlertDialog title=\"Are you sure delete?\" type=\"destructive\">\n          <template #trigger>\n            <SButton color=\"destructive\" variant=\"outline\">Show Dialog</SButton>\n          </template>\n          <p>This action will delete all data</p>\n          <template #footer>\n            <SAlertDialogCancel />\n            <SAlertDialogAction />\n          </template>\n        </SAlertDialog>\n      </SCard>\n      <SCard title=\"Success\" split>\n        <SAlertDialog title=\"Congratulations\" type=\"success\">\n          <template #trigger>\n            <SButton color=\"success\" variant=\"outline\">Show Dialog</SButton>\n          </template>\n          <p>You have successfully completed the task</p>\n          <template #footer>\n            <SAlertDialogAction />\n          </template>\n        </SAlertDialog>\n      </SCard>\n      <SCard title=\"Warning\" split>\n        <SAlertDialog title=\"Warning\" type=\"warning\">\n          <template #trigger>\n            <SButton color=\"warning\" variant=\"outline\">Show Dialog</SButton>\n          </template>\n          <p>Be careful with this action</p>\n          <template #footer>\n            <SAlertDialogCancel />\n            <SAlertDialogAction />\n          </template>\n        </SAlertDialog>\n      </SCard>\n      <SCard title=\"Info\" split>\n        <SAlertDialog title=\"Information\" type=\"info\">\n          <template #trigger>\n            <SButton color=\"info\" variant=\"outline\">Show Dialog</SButton>\n          </template>\n          <p>Here is some information for you</p>\n          <template #footer>\n            <SAlertDialogAction />\n          </template>\n        </SAlertDialog>\n      </SCard>\n    </div>\n  </SCard>\n</template>\n",
  "alert": "<script setup lang=\"ts\">\nimport { SAlert, SCard } from 'soy-ui';\nimport type { AlertVariant, ThemeColor, ThemeSize } from 'soy-ui';\nimport { Rocket, Terminal, TriangleAlert } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoAlert'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\nconst variants: AlertVariant[] = ['solid', 'pure', 'outline', 'soft', 'ghost'];\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Color\" split>\n      <div class=\"flex flex-c-stretch gap-12px\">\n        <SAlert v-for=\"color in colors\" :key=\"color\" :color=\"color\" :title=\"color\">\n          <template #icon>\n            <Terminal />\n          </template>\n        </SAlert>\n      </div>\n    </SCard>\n    <SCard title=\"Variant\" split>\n      <div class=\"flex flex-c-stretch gap-12px\">\n        <SAlert\n          v-for=\"(variant, index) in variants\"\n          :key=\"variant\"\n          :color=\"colors[index]\"\n          :variant=\"variant\"\n          :title=\"variant\"\n          closable\n        >\n          <template #icon>\n            <Terminal />\n          </template>\n        </SAlert>\n      </div>\n    </SCard>\n    <SCard title=\"With description\" split>\n      <SAlert variant=\"pure\" title=\"Heads up!\" description=\"You can add components to your app using the cli.\" />\n    </SCard>\n    <SCard title=\"With Icon\" split>\n      <SAlert color=\"success\" variant=\"outline\" title=\"Flighting !!!\">\n        <template #icon>\n          <Rocket />\n        </template>\n      </SAlert>\n    </SCard>\n    <SCard title=\"With description and icon\" split>\n      <SAlert\n        color=\"destructive\"\n        variant=\"ghost\"\n        title=\"Error\"\n        description=\"Your session has expired. Please log in again.\"\n      >\n        <template #icon>\n          <TriangleAlert />\n        </template>\n      </SAlert>\n    </SCard>\n    <SCard title=\"Closable\" split>\n      <SAlert variant=\"outline\" title=\"Closable\" description=\"You can click close icon to close alert.\" closable />\n    </SCard>\n    <SCard title=\"Size\" split>\n      <div class=\"flex flex-c-stretch gap-12px\">\n        <SAlert\n          v-for=\"(size, index) in sizes\"\n          :key=\"size\"\n          :title=\"`Size: ${size}`\"\n          :color=\"colors[index]\"\n          variant=\"soft\"\n          :size=\"size\"\n          closable\n        >\n          <template #icon>\n            <Terminal />\n          </template>\n        </SAlert>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "aspect-ratio": "<script setup lang=\"ts\">\nimport { SAspectRatio, SCard } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoAspectRatio'\n});\n</script>\n\n<template>\n  <SCard title=\"Aspect Ratio\" split>\n    <div class=\"w-600px lt-sm:w-full\">\n      <SAspectRatio :ratio=\"16 / 9\" class=\"bg-muted\">\n        <img\n          src=\"https://images.unsplash.com/photo-1588345921523-c2dcdb7f1dcd?w=800&dpr=2&q=80\"\n          alt=\"Photo by Drew Beamer\"\n          class=\"h-full w-full rounded-md object-cover\"\n        />\n      </SAspectRatio>\n    </div>\n  </SCard>\n</template>\n",
  "avatar": "<script setup lang=\"ts\">\nimport { SAvatar, SCard } from 'soy-ui';\nimport type { ThemeSize } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoAvatar'\n});\n\nconst soybeanUiRsc = 'https://soybean-ui.com/logo.svg';\n\nconst soybeanSrc = 'https://soybeanjs-1300612522.cos.ap-guangzhou.myqcloud.com/uPic/logo.png';\n\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <div class=\"flex gap-12px\">\n        <SAvatar :src=\"soybeanUiRsc\" alt=\"SoybeanUI\" fallback-label=\"CN\" />\n        <SAvatar :src=\"soybeanUiRsc\" alt=\"SoybeanUI\">\n          <template #fallback>SoybeanUI</template>\n        </SAvatar>\n      </div>\n    </SCard>\n    <SCard title=\"Size\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <div v-for=\"size in sizes\" :key=\"size\" class=\"flex-c-center\">\n          <SAvatar :size=\"size\" :src=\"soybeanSrc\" alt=\"SoybeanAdmin\" fallback-label=\"SOY\" />\n          <p>{{ size }}</p>\n        </div>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "badge": "<script setup lang=\"ts\">\nimport { SBadge, SCard } from 'soy-ui';\nimport type { BadgeShape, BadgeVariant, ThemeColor, ThemeSize } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoBadge'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\nconst variants: BadgeVariant[] = ['solid', 'pure', 'outline', 'soft', 'ghost'];\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\nconst shapes: BadgeShape[] = ['auto', 'rounded'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Color\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SBadge v-for=\"color in colors\" :key=\"color\" :color=\"color\">{{ color }}</SBadge>\n      </div>\n    </SCard>\n    <SCard title=\"Variant\" split>\n      <div class=\"flex-c-stretch gap-12px\">\n        <div v-for=\"color in colors\" :key=\"color\" class=\"flex flex-wrap gap-12px\">\n          <SBadge v-for=\"variant in variants\" :key=\"variant\" :color=\"color\" :variant=\"variant\">{{ variant }}</SBadge>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Size\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SBadge v-for=\"size in sizes\" :key=\"size\" :size=\"size\" variant=\"soft\">\n          {{ size }}\n        </SBadge>\n      </div>\n    </SCard>\n    <SCard title=\"Shape\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SBadge v-for=\"shape in shapes\" :key=\"shape\" variant=\"ghost\" :shape=\"shape\">{{ shape }}</SBadge>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "breadcrumb": "<script setup lang=\"ts\">\nimport { SBreadcrumb, SBreadcrumbEllipsis, SBreadcrumbPage, SCard, SDropdownMenu } from 'soy-ui';\nimport type { BreadcrumbItem, MenuOptionData, ThemeSize } from 'soy-ui';\nimport { Component, Dock, Home } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoBreadcrumb'\n});\n\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\n\nconst items: BreadcrumbItem[] = [\n  {\n    label: 'Home',\n    value: 'home',\n    icon: Home\n  },\n  {\n    label: 'Components',\n    value: 'components',\n    icon: Component\n  },\n  {\n    label: 'Breadcrumb',\n    value: 'breadcrumb',\n    icon: Dock\n  }\n];\n\nconst items2: BreadcrumbItem[] = [\n  {\n    label: 'Home',\n    value: 'home',\n    icon: Home\n  },\n  {\n    label: 'Vue',\n    value: 'vue',\n    href: 'https://vuejs.org',\n    target: '_blank'\n  },\n  {\n    label: 'SoybeanUI',\n    value: 'soybean-ui',\n    href: 'https://soybean-ui.com',\n    target: '_blank'\n  }\n];\n\nconst items3: BreadcrumbItem[] = items.concat([\n  {\n    label: 'Components2',\n    value: 'components2',\n    icon: Component\n  },\n  {\n    label: 'Breadcrumb2',\n    value: 'breadcrumb2',\n    icon: Dock\n  }\n]);\n\ninterface DropdownItem extends BreadcrumbItem {\n  items?: MenuOptionData[];\n}\n\nconst dropdownItems: DropdownItem[] = [\n  {\n    label: 'Home',\n    value: 'home',\n    icon: Home\n  },\n  {\n    label: 'Dropdown',\n    value: 'dropdown',\n    items: [\n      {\n        label: 'Documentation',\n        value: 'documentation'\n      },\n      {\n        label: 'Themes',\n        value: 'themes'\n      },\n      {\n        label: 'Github',\n        value: 'github'\n      }\n    ]\n  },\n  {\n    label: 'Components',\n    value: 'components',\n    icon: Component\n  },\n  {\n    label: 'Breadcrumb',\n    value: 'breadcrumb',\n    icon: Dock\n  }\n];\n\nfunction handleClick(item: BreadcrumbItem) {\n  console.log('clicked:', item);\n}\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <SBreadcrumb :items=\"items\" @click=\"handleClick\" />\n    </SCard>\n    <SCard title=\"Custom Separator\" split>\n      <SBreadcrumb :items=\"items\">\n        <template #separator>&nbsp;/&nbsp;</template>\n      </SBreadcrumb>\n    </SCard>\n    <SCard title=\"Link\" split>\n      <SBreadcrumb :items=\"items2\" />\n    </SCard>\n    <SCard title=\"Ellipsis\" split>\n      <SBreadcrumb :items=\"items3\" ellipsis />\n    </SCard>\n    <SCard title=\"Item Dropdown\" split>\n      <SBreadcrumb :items=\"dropdownItems\">\n        <template #default=\"{ item }\">\n          <SDropdownMenu v-if=\"item.items\" :items=\"item.items\" :modal=\"false\">\n            <template #trigger>\n              <SBreadcrumbPage class=\"cursor-pointer\">{{ item.label }}</SBreadcrumbPage>\n            </template>\n          </SDropdownMenu>\n          <SBreadcrumbPage v-else>{{ item.label }}</SBreadcrumbPage>\n        </template>\n      </SBreadcrumb>\n    </SCard>\n    <SCard title=\"Ellipsis Dropdown\" split>\n      <SBreadcrumb :items=\"items3\" ellipsis>\n        <template #ellipsis=\"{ ellipsisItems }\">\n          <SDropdownMenu :items=\"ellipsisItems\" :modal=\"false\">\n            <template #trigger>\n              <SBreadcrumbEllipsis class=\"cursor-pointer\" />\n            </template>\n          </SDropdownMenu>\n        </template>\n      </SBreadcrumb>\n    </SCard>\n    <SCard title=\"Size\" split>\n      <div class=\"flex-c-stretch gap-12px\">\n        <SBreadcrumb v-for=\"size in sizes\" :key=\"size\" :items=\"items\" :size=\"size\" />\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "button": "<script setup lang=\"ts\">\nimport { SButton, SButtonGroup, SButtonIcon, SButtonLink, SCard, SLoadingButton } from 'soy-ui';\nimport type { ButtonShadow, ButtonVariant, ThemeColor, ThemeSize } from 'soy-ui';\nimport { Loader, Minus, Pause, Plus, SkipBack, SkipForward } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoButton'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\nconst variants: ButtonVariant[] = ['solid', 'pure', 'plain', 'outline', 'dashed', 'soft', 'ghost', 'link'];\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\nconst shadows: ButtonShadow[] = ['none', 'sm', 'md', 'lg'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Color\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButton v-for=\"color in colors\" :key=\"color\" :color=\"color\">{{ color }}</SButton>\n      </div>\n    </SCard>\n    <SCard title=\"Variant\" split>\n      <div class=\"flex-c-stretch gap-12px\">\n        <div v-for=\"color in colors\" :key=\"color\" class=\"flex flex-wrap gap-12px\">\n          <SButton v-for=\"variant in variants\" :key=\"variant\" :color=\"color\" :variant=\"variant\">{{ variant }}</SButton>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Size\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButton v-for=\"(size, index) in sizes\" :key=\"size\" :color=\"colors[index]\" variant=\"outline\" :size=\"size\">\n          {{ size }}\n        </SButton>\n      </div>\n    </SCard>\n\n    <SCard title=\"Shape\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButton color=\"primary\" variant=\"solid\" shape=\"rounded\">rounded</SButton>\n        <div class=\"flex-c-center\">\n          <SButtonIcon color=\"destructive\" variant=\"plain\" shape=\"square\">\n            <Minus />\n          </SButtonIcon>\n          <div class=\"text-12px text-#666\">square</div>\n        </div>\n        <div class=\"flex-c-center\">\n          <SButtonIcon color=\"success\" variant=\"outline\" shape=\"circle\">\n            <Plus />\n          </SButtonIcon>\n          <div class=\"text-12px text-#666\">circle</div>\n        </div>\n        <div class=\"flex-c-center\">\n          <SButtonIcon color=\"warning\" variant=\"dashed\" shape=\"square\">\n            <Plus />\n          </SButtonIcon>\n          <div class=\"text-12px text-#666\">square</div>\n        </div>\n        <div class=\"flex-c-center\">\n          <SButtonIcon shape=\"circle\">\n            <Minus />\n          </SButtonIcon>\n          <div class=\"text-12px text-#666\">circle</div>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Shadow\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButton v-for=\"(item, index) in shadows\" :key=\"item\" :color=\"colors[index]\" variant=\"plain\" :shadow=\"item\">\n          {{ item }}\n        </SButton>\n      </div>\n    </SCard>\n    <SCard title=\"Slot\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButton color=\"primary\">\n          <template #leading>\n            <Plus />\n          </template>\n          leading\n        </SButton>\n        <SButton color=\"destructive\" variant=\"outline\">\n          After\n          <template #trailing>\n            <Minus />\n          </template>\n        </SButton>\n        <SButton color=\"success\" variant=\"dashed\">\n          <template #leading>\n            <Plus />\n          </template>\n          Both\n          <template #trailing>\n            <Minus />\n          </template>\n        </SButton>\n      </div>\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButton color=\"destructive\" variant=\"solid\" disabled>disabled</SButton>\n        <SButton color=\"success\" variant=\"outline\" disabled>disabled</SButton>\n        <SButton color=\"warning\" variant=\"dashed\" disabled>disabled</SButton>\n      </div>\n    </SCard>\n    <SCard title=\"Loading\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SLoadingButton color=\"success\" variant=\"solid\" loading>Loading...</SLoadingButton>\n        <SLoadingButton color=\"warning\" variant=\"outline\" loading>\n          <template #loading>\n            <Loader class=\"animate-spin\" />\n          </template>\n          Loading...\n        </SLoadingButton>\n      </div>\n    </SCard>\n    <SCard title=\"Link\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButtonLink href=\"https://soybeanjs.cn\">soybeanjs.cn</SButtonLink>\n      </div>\n    </SCard>\n    <SCard title=\"Button Group\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButtonGroup>\n          <SButton variant=\"outline\">\n            <SkipBack />\n          </SButton>\n          <SButton variant=\"outline\">\n            <Pause />\n          </SButton>\n          <SButton variant=\"outline\">\n            <SkipForward />\n          </SButton>\n        </SButtonGroup>\n        <SButtonGroup>\n          <SButton color=\"destructive\" variant=\"outline\">\n            <SkipBack />\n          </SButton>\n          <SButton color=\"destructive\" variant=\"outline\">\n            <SkipForward />\n          </SButton>\n        </SButtonGroup>\n      </div>\n    </SCard>\n    <SCard title=\"Button Group vertical\" split>\n      <div class=\"w-100px\">\n        <SButtonGroup orientation=\"vertical\">\n          <SButton variant=\"dashed\">\n            <SkipBack />\n          </SButton>\n          <SButton variant=\"dashed\">\n            <Pause />\n          </SButton>\n          <SButton variant=\"dashed\">\n            <SkipForward />\n          </SButton>\n        </SButtonGroup>\n      </div>\n    </SCard>\n    <SCard title=\"Button Icon\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButtonIcon>\n          <SkipBack />\n        </SButtonIcon>\n        <SButtonIcon>\n          <SkipForward />\n        </SButtonIcon>\n        <SButtonIcon>\n          <Pause />\n        </SButtonIcon>\n      </div>\n    </SCard>\n    <SCard title=\"Button Icon: fitContent\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SButtonIcon fit-content class=\"p-0.5 text-xl\">\n          <SkipBack />\n        </SButtonIcon>\n        <SButtonIcon fit-content class=\"p-0.5 text-xl\">\n          <SkipForward />\n        </SButtonIcon>\n        <SButtonIcon fit-content class=\"p-0.5 text-xl\">\n          <Pause />\n        </SButtonIcon>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "card": "<script setup lang=\"ts\">\nimport { SBadge, SButtonIcon, SCard } from 'soy-ui';\nimport type { ThemeSize } from 'soy-ui';\nimport { Rocket, X } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoCard'\n});\n\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Size\" split>\n      <div class=\"w-1/2 i-flex-c pr-10px lt-sm:(w-full pr-0)\">\n        <SCard v-for=\"size in sizes\" :key=\"size\" :title=\"`Size: ${size}`\" :size=\"size\" class=\"mb-12px\">\n          <template #extra>\n            <span>extra</span>\n          </template>\n          <p class=\"text-gray-500 dark:text-neutral-400\">Content</p>\n          <template #footer>Footer</template>\n        </SCard>\n      </div>\n      <div class=\"w-1/2 i-flex-c pl-10px lt-sm:(w-full pl-0)\">\n        <SCard v-for=\"size in sizes\" :key=\"size\" :title=\"`Size: ${size}`\" :size=\"size\" split class=\"mb-12px\">\n          <template #extra>\n            <SButtonIcon fit-content :size=\"size\">\n              <X />\n            </SButtonIcon>\n          </template>\n          <p class=\"text-gray-500 dark:text-neutral-400\">Content</p>\n          <template #footer>Footer</template>\n        </SCard>\n      </div>\n    </SCard>\n    <SCard title=\"More\" split :ui=\"{ content: 'flex-c-stretch gap-4' }\">\n      <SCard>\n        <p class=\"text-gray-500 dark:text-neutral-400\">Only Content</p>\n      </SCard>\n      <SCard title=\"Title\" split>\n        <p class=\"text-gray-500 dark:text-neutral-400\">Content</p>\n      </SCard>\n      <SCard split>\n        <p class=\"text-gray-500 dark:text-neutral-400\">Content</p>\n        <template #footer>Footer</template>\n      </SCard>\n      <SCard title=\"Title Slot\" split>\n        <template #title-leading>\n          <Rocket />\n        </template>\n        <template #title-trailing>\n          <SBadge variant=\"soft\">Badge</SBadge>\n        </template>\n        <p class=\"text-gray-500 dark:text-neutral-400\">Content</p>\n      </SCard>\n    </SCard>\n  </div>\n</template>\n",
  "carousel": "<script setup lang=\"ts\">\nimport { SCard, SCarousel } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoCarousel'\n});\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <div class=\"p-10\">\n        <SCarousel\n          :counts=\"10\"\n          :opts=\"{\n            loop: true\n          }\"\n          :ui=\"{ item: 'h-100px md:basis-1/4 lg:basis-1/5' }\"\n        >\n          <template #default=\"{ index }\">\n            <SCard class=\"size-full\">\n              <div class=\"size-full flex-center\">\n                {{ index }}\n              </div>\n            </SCard>\n          </template>\n        </SCarousel>\n      </div>\n    </SCard>\n    <SCard title=\"Vertical\" split>\n      <div class=\"p-10\">\n        <SCarousel\n          :counts=\"10\"\n          :opts=\"{\n            loop: true\n          }\"\n          orientation=\"vertical\"\n          :ui=\"{ content: 'h-200px', item: 'md:basis-1/2' }\"\n        >\n          <template #default=\"{ index }\">\n            <SCard class=\"size-full\">\n              {{ index }}\n            </SCard>\n          </template>\n        </SCarousel>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "checkbox": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue';\nimport { SCard, SCheckbox, SCheckboxGroup } from 'soy-ui';\nimport type { CheckboxGroupItem, CheckedState, ThemeColor, ThemeSize } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoCheckbox'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\n\nconst sizeChecked = ref<CheckedState>('indeterminate');\n\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\n\nconst checks = ref<string[]>(['1']);\nconst items = createCheckboxItems();\n\nconst checks2 = ref<string[]>(['1']);\nconst items2 = createCheckboxItems();\n\nconst checks3 = ref<string[]>([]);\nconst items3 = createCheckboxItems();\nconst checked = computed<CheckedState>({\n  get() {\n    if (checks3.value.length === 0) return false;\n\n    if (checks3.value.length === items3.length) return true;\n\n    return 'indeterminate';\n  },\n  set(value) {\n    checks3.value = value === true ? items3.map(item => item.value) : [];\n  }\n});\n\nfunction createCheckboxItems() {\n  return [\n    { label: 'A', value: '1' },\n    { label: 'B', value: '2' },\n    { label: 'C', value: '3' }\n  ] satisfies CheckboxGroupItem[];\n}\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Color\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SCheckbox v-for=\"color in colors\" :key=\"color\" :color=\"color\" :label=\"color\" />\n      </div>\n    </SCard>\n    <SCard title=\"Size\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SCheckbox v-for=\"size in sizes\" :key=\"size\" v-model=\"sizeChecked\" :size=\"size\" :label=\"size\" />\n      </div>\n    </SCard>\n    <SCard title=\"Group\" split>\n      <SCheckboxGroup v-model=\"checks\" :items=\"items\" />\n    </SCard>\n    <SCard title=\"Orientation: Vertical\" split>\n      <SCheckboxGroup v-model=\"checks2\" orientation=\"vertical\" :items=\"items2\" />\n    </SCard>\n    <SCard title=\"Indeterminate\" split>\n      <SCheckbox v-model=\"checked\" label=\"Check All\" />\n      <SCheckboxGroup v-model=\"checks3\" :items=\"items3\" class=\"mt-3\" />\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <SCheckboxGroup :default-value=\"['2']\" :items=\"items\" disabled />\n    </SCard>\n  </div>\n</template>\n",
  "chip": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SButton, SCard, SChip, SInput, SSwitch } from 'soy-ui';\nimport type { ChipPosition, ThemeColor, ThemeSize } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoChip'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\nconst positions: ChipPosition[] = ['top-right', 'bottom-right', 'top-left', 'bottom-left'];\n\nconst text = ref('99+');\nconst slotText = ref('New');\nconst show = ref(true);\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Color\" split>\n      <div class=\"flex gap-3\">\n        <div v-for=\"color in colors\" :key=\"color\">\n          <SChip :color=\"color\">\n            <SButton variant=\"dashed\">{{ color }}</SButton>\n          </SChip>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Color With Text\" split>\n      <div class=\"flex gap-4\">\n        <div v-for=\"color in colors\" :key=\"color\">\n          <SChip :color=\"color\" text=\"99+\">\n            <SButton variant=\"dashed\">{{ color }}</SButton>\n          </SChip>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Size\" split>\n      <div class=\"flex gap-3\">\n        <div v-for=\"size in sizes\" :key=\"size\">\n          <SChip :size=\"size\">\n            <SButton variant=\"soft\" :size=\"size\">{{ size }}</SButton>\n          </SChip>\n        </div>\n      </div>\n      <div class=\"mt-6 flex gap-3\">\n        <div v-for=\"size in sizes\" :key=\"size\">\n          <SChip :size=\"size\" text=\"99+\">\n            <SButton variant=\"soft\" :size=\"size\">{{ size }}</SButton>\n          </SChip>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Positions\" split>\n      <div class=\"flex gap-3\">\n        <div v-for=\"position in positions\" :key=\"position\">\n          <SChip :position=\"position\">\n            <SButton variant=\"dashed\" class=\"w-30\">{{ position }}</SButton>\n          </SChip>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"ModelValue\" split>\n      <div class=\"flex gap-3\">\n        <SInput v-model=\"text\" />\n        <SChip :text=\"text\">\n          <SButton variant=\"outline\">A</SButton>\n        </SChip>\n      </div>\n    </SCard>\n    <SCard title=\"Slot\" split>\n      <div class=\"flex gap-3\">\n        <SInput v-model=\"slotText\" />\n        <SChip :text=\"slotText\">\n          <SButton variant=\"outline\">A</SButton>\n          <template #content=\"{ value }\">{{ value }}！</template>\n        </SChip>\n      </div>\n    </SCard>\n    <SCard title=\"Show\" split>\n      <div class=\"flex gap-3\">\n        <SSwitch v-model:checked=\"show\" />\n        <SChip :show=\"show\">\n          <SButton variant=\"outline\">A</SButton>\n        </SChip>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "collapsible": "<script setup lang=\"ts\">\nimport { SButtonIcon, SCard, SCollapsible, SCollapsibleTrigger } from 'soy-ui';\nimport { ChevronsDownUp, ChevronsUpDown } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoCollapsible'\n});\n</script>\n\n<template>\n  <SCard title=\"Collapsible\" split>\n    <SCollapsible\n      class=\"w-350px lt-sm:w-auto space-y-2\"\n      :ui=\"{\n        content: 'space-y-2'\n      }\"\n    >\n      <template #default=\"{ open }\">\n        <div class=\"flex-y-center justify-between px-2 space-x-4\">\n          <h4 class=\"text-sm font-semibold\">@soybeanjs starred 3 repositories</h4>\n          <SCollapsibleTrigger as-child>\n            <SButtonIcon>\n              <ChevronsDownUp v-if=\"open\" />\n              <ChevronsUpDown v-else />\n            </SButtonIcon>\n          </SCollapsibleTrigger>\n        </div>\n        <div class=\"border rounded-md px-4 py-3 text-sm font-mono\">@soybean-ui/primitives</div>\n      </template>\n      <template #content>\n        <div class=\"border rounded-md px-4 py-3 text-sm font-mono\">@soybean-ui/colors</div>\n        <div class=\"border rounded-md px-4 py-3 text-sm font-mono\">soybean-ui</div>\n      </template>\n    </SCollapsible>\n  </SCard>\n</template>\n",
  "combobox": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, SCombobox } from 'soy-ui';\nimport type { ComboboxOptionData, ThemeSize } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoCombobox'\n});\n\nconst sizes: ThemeSize[] = ['xs', 'sm', 'md', 'lg', 'xl', '2xl'];\n\nconst framework = ref('0');\n\nconst frameworks: ComboboxOptionData[] = [\n  { value: '0', label: 'Vue' },\n  { value: '1', label: 'React' },\n  { value: '2', label: 'Next.js' },\n  { value: '3', label: 'SvelteKit' },\n  { value: '4', label: 'Nuxt' },\n  { value: '5', label: 'Remix' },\n  { value: '6', label: 'Astro' }\n];\n</script>\n\n<template>\n  <SCard title=\"Combobox Size\" split>\n    <div class=\"w-60 lt-sm:w-auto\">\n      <div class=\"flex-c-stretch gap-3\">\n        <div v-for=\"size in sizes\" :key=\"size\">\n          <div>{{ size }}</div>\n          <SCombobox\n            v-model=\"framework\"\n            :items=\"frameworks\"\n            trigger-label=\"Select framework\"\n            empty-label=\"No framework found.\"\n            :size=\"size\"\n            :input-props=\"{ placeholder: 'Select framework...' }\"\n          />\n        </div>\n      </div>\n      <div class=\"py-3 text-18px\">Traditional Mode</div>\n      <SCombobox\n        v-model=\"framework\"\n        :items=\"frameworks\"\n        mode=\"traditional\"\n        empty-label=\"No framework found.\"\n        :input-props=\"{ placeholder: 'Select framework...' }\"\n      />\n    </div>\n  </SCard>\n</template>\n",
  "command": "<script setup lang=\"ts\">\nimport { ref, watch } from 'vue';\nimport { useMagicKeys } from '@vueuse/core';\nimport { SCard, SCommand, SCommandDialog, SKeyboardKey } from 'soy-ui';\nimport type { CommandGroupOptionData, CommandOptionData, SelectEvent } from 'soy-ui';\nimport { Calendar, HelpCircle, Mail, Rocket, Settings, Smile, User } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoCommand'\n});\n\nconst keys = useMagicKeys();\n\nconst items: (CommandGroupOptionData | CommandOptionData)[] = [\n  {\n    label: 'Suggestions',\n    separator: true,\n    items: [\n      {\n        label: 'Calendar',\n        value: 'calendar',\n        icon: Calendar\n      },\n      {\n        label: 'Search Emoji',\n        value: 'search-emoji',\n        icon: Smile\n      },\n      {\n        label: 'Launch',\n        value: 'launch',\n        icon: Rocket\n      }\n    ]\n  },\n  {\n    label: 'Settings',\n    separator: true,\n    items: [\n      {\n        label: 'Profile',\n        value: 'profile',\n        icon: User,\n        shortcut: ['command', 'p']\n      },\n      {\n        label: 'Mail',\n        value: 'mail',\n        icon: Mail,\n        shortcut: ['command', 'm']\n      },\n      {\n        label: 'Settings',\n        value: 'settings',\n        icon: Settings,\n        shortcut: ['command', 's']\n      }\n    ]\n  },\n  {\n    label: 'Help',\n    value: 'help',\n    icon: HelpCircle,\n    shortcut: ['command', 'h']\n  }\n];\n\nfunction handleSelect(item: CommandOptionData, event: SelectEvent) {\n  console.log(item, event);\n}\n\nconst open = ref(false);\n\nconst CmdJ = keys['Cmd+J'];\n\nfunction handleOpenChange() {\n  open.value = !open.value;\n}\n\nwatch(CmdJ, v => {\n  if (v) {\n    handleOpenChange();\n  }\n});\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Command\" split>\n      <SCommand class=\"border rounded-lg shadow-md\" :items=\"items\" />\n    </SCard>\n    <SCard title=\"Dialog Command\" split>\n      <SKeyboardKey :value=\"['command', 'j']\" />\n      <SCommandDialog v-model:open=\"open\">\n        <SCommand\n          :items=\"items\"\n          :input-props=\"{ placeholder: 'Type a command or search...' }\"\n          empty-label=\"No option found\"\n          @select=\"handleSelect\"\n        />\n      </SCommandDialog>\n    </SCard>\n  </div>\n</template>\n",
  "context-menu": "<script setup lang=\"ts\">\nimport { SCard, SContextMenu } from 'soy-ui';\nimport type { MenuOptionData } from 'soy-ui';\nimport {\n  CirclePlus,\n  Cloud,\n  CreditCard,\n  Facebook,\n  Github,\n  Keyboard,\n  LifeBuoy,\n  LogOut,\n  Mail,\n  MessageCircle,\n  Settings,\n  Twitter,\n  User,\n  UserPlus,\n  Users\n} from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoContextMenu'\n});\n\nconst menus: MenuOptionData<string>[] = [\n  {\n    isGroupLabel: true,\n    value: 'myAccount',\n    label: 'My Account',\n    separator: true\n  },\n  { value: '01', label: 'Profile', icon: User, shortcut: ['command', 'shift', 'p'] },\n  { value: '02', label: 'Billing', icon: CreditCard, shortcut: ['command', 'b'] },\n  { value: '03', label: 'Settings', icon: Settings, shortcut: ['command', 's'] },\n  { value: '04', label: 'Keyboard shortcuts', icon: Keyboard, shortcut: ['command', 'k'], separator: true },\n  { value: '05', label: 'Team', icon: Users, shortcut: ['command', 'shift', 't'] },\n  {\n    value: '06',\n    label: 'Invite Users',\n    icon: UserPlus,\n    separator: true,\n    children: [\n      { value: '0601', label: 'Email', icon: Mail, shortcut: ['command', 'shift', 'e'] },\n      { value: '0602', label: 'Facebook', icon: Facebook, shortcut: ['command', 'shift', 'f'] },\n      { value: '0603', label: 'Twitter', icon: Twitter, shortcut: ['command', 'shift', 't'], separator: true },\n      {\n        value: '0604',\n        label: 'More',\n        icon: CirclePlus,\n        children: [{ value: '060401', label: 'Message', icon: MessageCircle, shortcut: ['command', 'm'] }]\n      }\n    ]\n  },\n  {\n    value: '07',\n    label: 'Github',\n    icon: Github,\n    linkProps: { href: 'https://github.com', target: '_blank' }\n  },\n  { value: '08', label: 'Support', icon: LifeBuoy },\n  { value: '09', label: 'API', icon: Cloud, disabled: true, separator: true },\n  { value: '10', label: 'Sign out', icon: LogOut, shortcut: ['command', 'shift', 'Q'] }\n];\n</script>\n\n<template>\n  <SCard title=\"ContextMenu\" split>\n    <SContextMenu :items=\"menus\">\n      <template #trigger>\n        <div class=\"h-50 w-80 flex items-center justify-center border rounded-md border-dashed text-sm\">\n          Right click here\n        </div>\n      </template>\n    </SContextMenu>\n  </SCard>\n</template>\n",
  "dialog": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SButton, SCard, SDialog, SDialogClose } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoDialog'\n});\n\nconst open = ref(false);\n\nfunction closeDialog() {\n  open.value = false;\n}\n</script>\n\n<template>\n  <SCard title=\"Dialog\">\n    <div class=\"flex-c gap-4\">\n      <SCard title=\"Default\" split>\n        <SDialog title=\"Dialog Title\">\n          <template #trigger>\n            <SButton variant=\"outline\">Open</SButton>\n          </template>\n          <div>Dialog Content</div>\n        </SDialog>\n      </SCard>\n      <SCard title=\"With Footer\" split>\n        <SDialog title=\"Dialog Title\">\n          <template #trigger>\n            <SButton variant=\"outline\">Open</SButton>\n          </template>\n          <div>Dialog Content</div>\n          <template #footer>\n            <SDialogClose as-child>\n              <SButton variant=\"plain\">Cancel</SButton>\n            </SDialogClose>\n            <SButton>Confirm</SButton>\n          </template>\n        </SDialog>\n      </SCard>\n      <SCard title=\"Control Open State\" split>\n        <SDialog v-model:open=\"open\" title=\"Dialog Title\">\n          <template #trigger>\n            <SButton variant=\"outline\">Open</SButton>\n          </template>\n          <div>Dialog Content</div>\n          <template #footer>\n            <SButton variant=\"plain\" @click=\"closeDialog\">Cancel</SButton>\n            <SButton @click=\"closeDialog\">Confirm</SButton>\n          </template>\n        </SDialog>\n      </SCard>\n      <SCard title=\"Disabled close when click outside or press escape key\" split>\n        <SDialog\n          title=\"Dialog Title\"\n          @pointer-down-outside=\"e => e.preventDefault()\"\n          @escape-key-down=\"e => e.preventDefault()\"\n        >\n          <template #trigger>\n            <SButton variant=\"outline\">Open</SButton>\n          </template>\n          <div>Dialog Content</div>\n          <template #footer>\n            <SDialogClose as-child>\n              <SButton variant=\"plain\">Cancel</SButton>\n            </SDialogClose>\n            <SButton>Confirm</SButton>\n          </template>\n        </SDialog>\n      </SCard>\n    </div>\n  </SCard>\n</template>\n",
  "drawer": "<script setup lang=\"ts\">\nimport { SButton, SCard, SDrawer, SDrawerClose } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoDrawer'\n});\n</script>\n\n<template>\n  <SCard title=\"Drawer\" split>\n    <SDrawer title=\"Drawer Title\" show-close :ui=\"{ contentBody: 'mx-auto max-w-sm w-full' }\">\n      <template #trigger>\n        <SButton variant=\"outline\">Open</SButton>\n      </template>\n      <p>\n        This is a basic drawer with a title and description.\n        <br />\n        For some strange reason the Vaul won't pull to close when a form i s present inside it\n      </p>\n      <template #footer>\n        <SDrawerClose as-child>\n          <SButton variant=\"outline\">Cancel</SButton>\n        </SDrawerClose>\n        <SButton>Submit</SButton>\n      </template>\n    </SDrawer>\n  </SCard>\n</template>\n",
  "dropdown-menu": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SButton, SCard, SDropdownMenu, SDropdownMenuCheckbox, SDropdownMenuRadio } from 'soy-ui';\nimport type { MenuOptionData } from 'soy-ui';\nimport {\n  CirclePlus,\n  Cloud,\n  CreditCard,\n  Facebook,\n  Github,\n  Keyboard,\n  LifeBuoy,\n  LogOut,\n  Mail,\n  MessageCircle,\n  Settings,\n  Twitter,\n  User,\n  UserPlus,\n  Users\n} from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoDropdownMenu'\n});\n\nconst menus: MenuOptionData<string>[] = [\n  {\n    isGroupLabel: true,\n    value: 'myAccount',\n    label: 'My Account',\n    separator: true\n  },\n  { value: '01', label: 'Profile', icon: User, shortcut: ['command', 'shift', 'p'] },\n  { value: '02', label: 'Billing', icon: CreditCard, shortcut: ['command', 'b'] },\n  { value: '03', label: 'Settings', icon: Settings, shortcut: ['command', 's'] },\n  { value: '04', label: 'Keyboard shortcuts', icon: Keyboard, shortcut: ['command', 'k'], separator: true },\n  { value: '05', label: 'Team', icon: Users, shortcut: ['command', 'shift', 't'] },\n  {\n    value: '06',\n    label: 'Invite Users',\n    icon: UserPlus,\n    separator: true,\n    children: [\n      { value: '0601', label: 'Email', icon: Mail, shortcut: ['command', 'shift', 'e'] },\n      { value: '0602', label: 'Facebook', icon: Facebook, shortcut: ['command', 'shift', 'f'] },\n      { value: '0603', label: 'Twitter', icon: Twitter, shortcut: ['command', 'shift', 't'], separator: true },\n      {\n        value: '0604',\n        label: 'More',\n        icon: CirclePlus,\n        children: [{ value: '060401', label: 'Message', icon: MessageCircle, shortcut: ['command', 'm'] }]\n      }\n    ]\n  },\n  {\n    value: '07',\n    label: 'Github',\n    icon: Github,\n    linkProps: { href: 'https://github.com', target: '_blank' }\n  },\n  { value: '08', label: 'Support', icon: LifeBuoy },\n  { value: '09', label: 'API', icon: Cloud, disabled: true, separator: true },\n  { value: '10', label: 'Sign out', icon: LogOut, shortcut: ['command', 'shift', 'Q'] }\n];\n\nfunction handleSelect(_event: Event, item: MenuOptionData) {\n  console.log('Selected:', item);\n}\n\nconst items: MenuOptionData[] = [\n  { isGroupLabel: true, value: 'myAccount', label: 'My Account', separator: true },\n  { value: '01', label: 'Profile', icon: User, shortcut: '⇧⌘P' },\n  { value: '02', label: 'Billing', icon: CreditCard, shortcut: '⌘B' },\n  { value: '03', label: 'Settings', icon: Settings, shortcut: '⌘S', separator: true },\n  { value: '04', label: 'Keyboard shortcuts', icon: Keyboard, shortcut: '⌘K' }\n];\n\nconst checks = ref(['01']);\n\nconst placement = ref('top-start');\n\nconst placements = [\n  { isGroupLabel: true, value: 'tooltipPlacement', label: 'Tooltip Placement', separator: true },\n  { value: 'top-start', label: 'Top Start' },\n  { value: 'top', label: 'Top' },\n  { value: 'top-end', label: 'Top End' },\n  { value: 'right-start', label: 'Right Start' },\n  { value: 'right', label: 'Right' },\n  { value: 'right-end', label: 'Right End' },\n  { value: 'bottom-start', label: 'Bottom Start' },\n  { value: 'bottom', label: 'Bottom' },\n  { value: 'bottom-end', label: 'Bottom End' },\n  { value: 'left-start', label: 'Left Start' },\n  { value: 'left', label: 'Left' },\n  { value: 'left-end', label: 'Left End' }\n];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Dropdown Menu\" split>\n      <SDropdownMenu :items=\"menus\" @select=\"handleSelect\">\n        <template #trigger>\n          <SButton variant=\"pure\">Dropdown</SButton>\n        </template>\n      </SDropdownMenu>\n    </SCard>\n    <SCard title=\"With Arrow\" split>\n      <SDropdownMenu :items=\"menus\" show-arrow>\n        <template #trigger>\n          <SButton variant=\"pure\">Open Dropdown</SButton>\n        </template>\n      </SDropdownMenu>\n    </SCard>\n    <SCard title=\"Checkbox\" split>\n      <SDropdownMenuCheckbox v-model=\"checks\" :items=\"items\">\n        <template #trigger>\n          <SButton variant=\"pure\">Checkbox Dropdown</SButton>\n        </template>\n      </SDropdownMenuCheckbox>\n    </SCard>\n    <SCard title=\"Radio\" split>\n      <SDropdownMenuRadio v-model=\"placement\" :items=\"placements\">\n        <template #trigger>\n          <SButton variant=\"pure\">Radio Dropdown</SButton>\n        </template>\n      </SDropdownMenuRadio>\n    </SCard>\n  </div>\n</template>\n",
  "form": "<script setup lang=\"ts\">\nimport { ref, watch } from 'vue';\nimport {\n  SButton,\n  SButtonIcon,\n  SCard,\n  SCheckboxGroup,\n  SFormField,\n  SFormFieldArray,\n  SInput,\n  SRadioGroup,\n  SSelect,\n  SSwitch,\n  useForm\n} from 'soy-ui';\nimport type { CheckboxGroupItem, RadioGroupItemProps, SelectOptionData } from 'soy-ui';\nimport * as v from 'valibot';\nimport { toTypedSchema } from '@vee-validate/valibot';\nimport { Minus, Plus } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoForm'\n});\n\nconst user = v.object({\n  username: v.string('Username is required'),\n  gender: v.picklist(['male', 'female'], 'Gender is required'),\n  remember: v.boolean('Remember is required'),\n  hobbies: v.pipe(v.array(v.string(), 'Hobbies is required'), v.minLength(1, 'Hobbies is required')),\n  city: v.string('City is required'),\n  social: v.pipe(\n    v.array(\n      v.object({\n        name: v.pipe(v.string(), v.nonEmpty('Name is required')),\n        url: v.pipe(v.string(), v.nonEmpty('URL is required'))\n      }),\n      'Social is required'\n    ),\n    v.minLength(1, 'Social is required')\n  )\n});\n\nconst formSchema = toTypedSchema(user);\n\nconst { handleSubmit, values, setFieldValue } = useForm({\n  validationSchema: formSchema\n});\n\nconst genderItems = ref<RadioGroupItemProps[]>([\n  { label: 'Male', value: 'male' },\n  { label: 'Female', value: 'female' }\n]);\n\nconst hobbies = ref<CheckboxGroupItem[]>([\n  { label: 'Reading', value: 'reading' },\n  { label: 'Traveling', value: 'traveling' },\n  { label: 'Sports', value: 'sports' },\n  { label: 'Music', value: 'music' }\n]);\n\nconst cities = ref<SelectOptionData[]>([\n  { label: 'Beijing', value: 'beijing' },\n  { label: 'Shanghai', value: 'shanghai' },\n  { label: 'Guangzhou', value: 'guangzhou' }\n]);\n\nconst onSubmit = handleSubmit(value => {\n  console.log(value);\n});\n\nwatch(values, value => {\n  console.log(value);\n});\n</script>\n\n<template>\n  <SCard title=\"Form\" split>\n    <form class=\"w-480px space-y-4\" @submit=\"onSubmit\">\n      <SFormField name=\"username\" label=\"Username\">\n        <SInput placeholder=\"Please input username\" />\n      </SFormField>\n      <SFormField name=\"gender\" label=\"Gender\">\n        <SRadioGroup :items=\"genderItems\" />\n      </SFormField>\n      <SFormField name=\"remember\" label=\"Remember\">\n        <SSwitch class=\"block\" />\n      </SFormField>\n      <SFormField name=\"hobbies\" label=\"Hobbies\">\n        <SCheckboxGroup :items=\"hobbies\" />\n      </SFormField>\n      <SFormField name=\"city\" label=\"City\">\n        <SSelect :items=\"cities\" />\n      </SFormField>\n      <SFormFieldArray name=\"social\">\n        <template #label>\n          <span>Social</span>\n          <SButtonIcon\n            v-if=\"!values.social?.length\"\n            type=\"button\"\n            @click=\"setFieldValue('social', [{ name: '', url: '' }])\"\n          >\n            <Plus />\n          </SButtonIcon>\n        </template>\n        <template #default=\"{ fields, push, remove }\">\n          <div v-for=\"(field, index) in fields\" :key=\"field.key\" class=\"flex gap-12px\">\n            <SFormField :name=\"`social.${index}.name`\" label=\"Name\">\n              <SInput />\n            </SFormField>\n            <SFormField :name=\"`social.${index}.url`\" label=\"URL\">\n              <SInput />\n            </SFormField>\n            <SButtonIcon type=\"button\" class=\"mt-7 flex-shrink-0\" @click=\"remove(index)\">\n              <Minus />\n            </SButtonIcon>\n            <SButtonIcon type=\"button\" class=\"mt-7 flex-shrink-0\" @click=\"push({ name: '', url: '' })\">\n              <Plus />\n            </SButtonIcon>\n          </div>\n        </template>\n      </SFormFieldArray>\n      <SButton type=\"submit\">Submit</SButton>\n    </form>\n  </SCard>\n</template>\n",
  "hover-card": "<script setup lang=\"ts\">\nimport { SAvatar, SButton, SCard, SHoverCard } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoHoverCard'\n});\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <SHoverCard :ui=\"{ content: 'w-64' }\">\n        <template #trigger>\n          <SButton variant=\"link\">@soybeanjs</SButton>\n        </template>\n        <div class=\"flex justify-between space-x-4\">\n          <SAvatar src=\"/favicon.svg\">\n            <template #fallback>VC</template>\n          </SAvatar>\n          <div class=\"space-y-1\">\n            <h4 class=\"text-sm font-semibold\">@soybeanjs</h4>\n            <p class=\"text-sm\">SoybeanJS is a front-end technology team, built by Soybean.</p>\n          </div>\n        </div>\n      </SHoverCard>\n    </SCard>\n    <SCard title=\"With Arrow\" split>\n      <SHoverCard :ui=\"{ content: 'w-64' }\" show-arrow>\n        <template #trigger>\n          <SButton variant=\"link\">@soybeanjs</SButton>\n        </template>\n        <div class=\"flex justify-between space-x-4\">\n          <SAvatar src=\"/favicon.svg\">\n            <template #fallback>VC</template>\n          </SAvatar>\n          <div class=\"space-y-1\">\n            <h4 class=\"text-sm font-semibold\">@soybeanjs</h4>\n            <p class=\"text-sm\">SoybeanJS is a front-end technology team, built by Soybean.</p>\n          </div>\n        </div>\n      </SHoverCard>\n    </SCard>\n  </div>\n</template>\n",
  "input": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, SInput } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoInput'\n});\n\nconst modelValue = ref<string>('');\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Input\" split>\n      <SInput placeholder=\"Please input\" />\n    </SCard>\n    <SCard :title=\"`ModelValue : ${modelValue}`\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <SInput v-model=\"modelValue\" placeholder=\"Please input\" />\n      </div>\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <SInput model-value=\"the input is disabled\" disabled placeholder=\"Please input\" />\n      </div>\n    </SCard>\n    <SCard title=\"File\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <SInput type=\"file\" />\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "keyboard-key": "<script setup lang=\"ts\">\nimport { SCard, SKeyboardKey, SKeyboardKeyGroup } from 'soy-ui';\nimport type { KeyboardKeyVariant } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoKeyboardKey'\n});\n\nconst variants: KeyboardKeyVariant[] = ['solid', 'outline', 'ghost'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Keyboard Key\" split>\n      <SKeyboardKey value=\"command\" />\n    </SCard>\n    <SCard title=\"Variant\" split>\n      <div class=\"flex gap-4\">\n        <div v-for=\"variant in variants\" :key=\"variant\" class=\"flex-c-center gap-2\">\n          <SKeyboardKey :variant=\"variant\" value=\"K\" />\n          <div>{{ variant }}</div>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Combination\" split>\n      <div class=\"flex flex-wrap gap-2\">\n        <SKeyboardKey :value=\"['command', 'k']\" variant=\"solid\" />\n        <SKeyboardKey :value=\"['shift', 's']\" variant=\"outline\" />\n        <SKeyboardKey :value=\"['ctrl', 'alt', 'a']\" variant=\"ghost\" />\n      </div>\n    </SCard>\n    <SCard title=\"Group\" split>\n      <div class=\"flex-c gap-2\">\n        <SKeyboardKeyGroup :values=\"['command', 'shift', 'alt']\" variant=\"solid\" />\n        <SKeyboardKeyGroup :values=\"['command', 'shift', 'alt']\" variant=\"outline\" separator=\" \" />\n        <SKeyboardKeyGroup :values=\"['command', 'shift', 'alt']\" variant=\"ghost\" separator=\" \" />\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "menubar": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, SMenubar } from 'soy-ui';\nimport type { MenuOptionData } from 'soy-ui';\nimport { EditIcon, FileIcon, Link, UserIcon, ViewIcon } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoMenubar'\n});\n\nconst options: MenuOptionData[] = [\n  {\n    label: 'File',\n    value: 'file',\n    icon: FileIcon,\n    children: [\n      {\n        label: 'New Tab',\n        value: 'new-tab',\n        shortcut: ['command', 't']\n      },\n      {\n        label: 'New Window',\n        value: 'new-window',\n        shortcut: ['command', 'n']\n      },\n      {\n        label: 'New Incognito Window',\n        value: 'new-window-incognito',\n        disabled: true,\n        separator: true\n      },\n      {\n        label: 'Share',\n        value: 'share',\n        children: [\n          {\n            label: 'Email link',\n            value: 'share-to-email'\n          },\n          {\n            label: 'Messages',\n            value: 'share-to-messages'\n          },\n          {\n            label: 'Notes',\n            value: 'share-to-notes'\n          }\n        ],\n        separator: true\n      },\n      {\n        label: 'Print...',\n        value: 'print',\n        shortcut: ['command', 'p']\n      }\n    ]\n  },\n  {\n    label: 'Edit',\n    value: 'edit',\n    icon: EditIcon,\n    children: [\n      {\n        label: 'Undo',\n        value: 'undo',\n        shortcut: ['command', 'z']\n      },\n      {\n        label: 'Redo',\n        value: 'redo',\n        shortcut: ['command', 'shift', 'z'],\n        separator: true\n      },\n      {\n        label: 'Find',\n        value: 'find',\n        children: [\n          {\n            label: 'Search the web',\n            value: 'find-web'\n          },\n          {\n            label: 'Find...',\n            value: 'find-input'\n          },\n          {\n            label: 'Find Next',\n            value: 'find-next'\n          },\n          {\n            label: 'Find Previous',\n            value: 'find-previous'\n          }\n        ]\n      },\n      {\n        label: 'Cut',\n        value: 'cut',\n        shortcut: ['command', 'x']\n      },\n      {\n        label: 'Copy',\n        value: 'copy',\n        shortcut: ['command', 'c']\n      },\n      {\n        label: 'Paste',\n        value: 'paste',\n        shortcut: ['command', 'v']\n      }\n    ]\n  },\n  {\n    label: 'View',\n    value: 'view',\n    icon: ViewIcon,\n    children: [\n      {\n        label: 'Always Show Bookmarks Bar',\n        value: 'always-show-bookmarks-bar'\n      },\n      {\n        label: 'Always Show Full URLs',\n        value: 'always-show-full-urls',\n        separator: true\n      },\n      {\n        label: 'Reload',\n        value: 'reload',\n        shortcut: ['command', 'r']\n      },\n      {\n        label: 'Force Reload',\n        value: 'force-reload',\n        shortcut: ['command', 'shift', 'r'],\n        separator: true\n      },\n      {\n        label: 'Toggle Fullscreen',\n        value: 'toggle-fullscreen',\n        separator: true\n      },\n      {\n        label: 'Hide Sidebar',\n        value: 'hide-sidebar'\n      }\n    ]\n  },\n  {\n    label: 'Profiles',\n    value: 'profiles',\n    icon: UserIcon,\n    children: [\n      {\n        label: 'Andy',\n        value: 'andy'\n      },\n      {\n        label: 'Benoit',\n        value: 'benoit'\n      },\n      {\n        label: 'Luis',\n        value: 'luis',\n        separator: true\n      },\n      {\n        label: 'Edit...',\n        value: 'edit',\n        separator: true\n      },\n      {\n        label: 'Add Profile...',\n        value: 'add-profile'\n      }\n    ]\n  },\n  {\n    label: 'Link',\n    value: 'link',\n    icon: Link,\n    linkProps: {\n      href: 'https://soybeanjs.cn'\n    }\n  }\n];\n\nconst currentMenu = ref('');\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <SMenubar v-model=\"currentMenu\" :items=\"options\" class=\"w-fit\" />\n    </SCard>\n    <SCard title=\"With Arrow\" split>\n      <SMenubar v-model=\"currentMenu\" :items=\"options\" show-arrow class=\"w-fit\" />\n    </SCard>\n  </div>\n</template>\n",
  "navigation-menu": "<script setup lang=\"ts\">\nimport { SCard, SNavigationMenu } from 'soy-ui';\nimport type { NavigationMenuItemOption } from 'soy-ui';\nimport {\n  BookOpen,\n  Box,\n  CloudDownload,\n  Cog,\n  Database,\n  FileText,\n  Github,\n  HelpCircle,\n  House,\n  Smile,\n  SwatchBook\n} from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoNavigationMenu'\n});\n\nconst menus: NavigationMenuItemOption[] = [\n  {\n    value: 'guide',\n    label: 'Guide',\n    icon: BookOpen,\n    href: '/getting-started',\n    items: [\n      {\n        value: 'introduction',\n        label: 'Introduction',\n        description: 'Fully styled and customizable components for Nuxt.',\n        icon: House\n      },\n      {\n        value: 'installation',\n        label: 'Installation',\n        description: 'Learn how to install and configure Nuxt UI in your application.',\n        icon: CloudDownload\n      },\n      {\n        value: 'icons',\n        label: 'Icons',\n        icon: Smile,\n        description: 'You have nothing to do, @nuxt/icon will handle it automatically.'\n      },\n      {\n        value: 'colors',\n        label: 'Colors',\n        icon: SwatchBook,\n        description: 'Choose a primary and a neutral color from your Tailwind CSS theme.'\n      },\n      {\n        value: 'theme',\n        label: 'Theme',\n        icon: Cog,\n        description: 'You can customize components by using the `class` / `ui` props or in your app.config.ts.'\n      }\n    ]\n  },\n  {\n    value: 'composables',\n    label: 'Composables',\n    icon: Database,\n    href: '/composables',\n    items: [\n      {\n        value: 'defineShortcuts',\n        label: 'defineShortcuts',\n        icon: FileText,\n        description: 'Define shortcuts for your application.',\n        href: '/composables/define-shortcuts'\n      },\n      {\n        value: 'useModal',\n        label: 'useModal',\n        icon: FileText,\n        description: 'Display a modal within your application.',\n        href: '/composables/use-modal'\n      },\n      {\n        value: 'useSlideover',\n        label: 'useSlideover',\n        icon: FileText,\n        description: 'Display a slideover within your application.',\n        href: '/composables/use-slideover'\n      },\n      {\n        value: 'useToast',\n        label: 'useToast',\n        icon: FileText,\n        description: 'Display a toast within your application.',\n        href: '/composables/use-toast'\n      }\n    ]\n  },\n  {\n    value: 'components',\n    label: 'Components',\n    icon: Box,\n    href: '/components',\n    items: [\n      {\n        value: 'link',\n        label: 'Link',\n        icon: FileText,\n        description: 'Use NuxtLink with superpowers.',\n        href: '/components/link'\n      },\n      {\n        value: 'modal',\n        label: 'Modal',\n        icon: FileText,\n        description: 'Display a modal within your application.',\n        href: '/components/modal'\n      },\n      {\n        value: 'navigation-menu',\n        label: 'NavigationMenu',\n        icon: FileText,\n        description: 'Display a list of links.',\n        href: '/components/navigation-menu'\n      },\n      {\n        value: 'pagination',\n        label: 'Pagination',\n        icon: FileText,\n        description: 'Display a list of pages.',\n        href: '/components/pagination'\n      },\n      {\n        value: 'popover',\n        label: 'Popover',\n        icon: FileText,\n        description: 'Display a non-modal dialog that floats around a trigger element.',\n        href: '/components/popover'\n      },\n      {\n        value: 'progress',\n        label: 'Progress',\n        icon: FileText,\n        description: 'Show a horizontal bar to indicate task progression.',\n        href: '/components/progress'\n      }\n    ]\n  },\n  {\n    label: 'GitHub',\n    icon: Github,\n    href: 'https://github.com/nuxt/ui',\n    target: '_blank'\n  },\n  {\n    label: 'Help',\n    icon: HelpCircle,\n    href: 'https://github.com/nuxt/ui',\n    disabled: true\n  }\n];\n</script>\n\n<template>\n  <SCard title=\"NavigationMenu\" split>\n    <SNavigationMenu :items=\"menus\" show-arrow :ui=\"{ childLink: 'w-80' }\" />\n  </SCard>\n</template>\n",
  "number-field": "<script setup lang=\"ts\">\nimport { SCard, SNumberField } from 'soy-ui';\nimport { ChevronDown, ChevronUp } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoNumberField'\n});\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Number Field\" split>\n      <div class=\"w-320px flex-c gap-2 lt-sm:w-auto\">\n        <SNumberField />\n      </div>\n    </SCard>\n    <SCard title=\"Center\" split>\n      <div class=\"w-320px flex-c gap-2 lt-sm:w-auto\">\n        <SNumberField center />\n      </div>\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <SNumberField :default-value=\"10\" disabled />\n      </div>\n    </SCard>\n    <SCard title=\"Custom Icon\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <SNumberField :default-value=\"10\">\n          <template #decrement-icon>\n            <ChevronDown />\n          </template>\n          <template #increment-icon>\n            <ChevronUp />\n          </template>\n        </SNumberField>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "pagination": "<script setup lang=\"ts\">\nimport { SCard, SPagination } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoPagination'\n});\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Variant\" split>\n      <div class=\"py-12px text-18px\">plain</div>\n      <SPagination show-edges :sibling-count=\"1\" :items-per-page=\"10\" :total=\"200\" />\n    </SCard>\n    <SCard title=\"ghost\" split>\n      <SPagination variant=\"ghost\" show-edges :sibling-count=\"1\" :items-per-page=\"10\" :total=\"200\" />\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <SPagination disabled :sibling-count=\"1\" :items-per-page=\"10\" :total=\"200\" />\n    </SCard>\n  </div>\n</template>\n",
  "pin-input": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, SPinInput, SonnerToaster, toast } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoPinInput'\n});\n\nconst numberValue = ref<string[]>([]);\n\nconst handleComplete = (value: string[]) => {\n  toast.info(`the input value is ${value.join('')}`);\n};\n\nconst upperCaseValue = ref<string[]>([]);\n\nfunction handleChange(value: string[]) {\n  upperCaseValue.value = value.join('').toUpperCase().split('');\n}\n</script>\n\n<template>\n  <SonnerToaster position=\"top-center\" />\n  <div class=\"demo-pin-input flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <SPinInput v-model=\"numberValue\" type=\"number\" placeholder=\"○\" @complete=\"handleComplete\" />\n    </SCard>\n    <SCard title=\"Custom Input Count\" split>\n      <SPinInput :input-count=\"8\" placeholder=\"○\" />\n    </SCard>\n    <SCard title=\"UpperCase\" split>\n      <SPinInput :model-value=\"upperCaseValue\" placeholder=\"○\" @update:model-value=\"handleChange\" />\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <SPinInput placeholder=\"○\" disabled />\n    </SCard>\n    <SCard title=\"Separator\" split>\n      <SPinInput separate />\n    </SCard>\n    <SCard title=\"Custom separator\" split>\n      <SPinInput>\n        <template #separator>-</template>\n      </SPinInput>\n    </SCard>\n    <SCard title=\"Password\" split>\n      <SPinInput placeholder=\"○\" type=\"text\" mask />\n    </SCard>\n  </div>\n</template>\n\n<style scoped></style>\n",
  "popover": "<script setup lang=\"ts\">\nimport { SButton, SCard, SPopover } from 'soy-ui';\nimport type { PopoverAlign, PopoverSide } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoPopover'\n});\n\nconst sides: PopoverSide[] = ['top', 'right', 'bottom', 'left'];\n\nconst aligns: PopoverAlign[] = ['start', 'center', 'end'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Popover Position\" split>\n      <div v-for=\"side in sides\" :key=\"side\">\n        <div class=\"py-12px text-18px\">Side: {{ side }}</div>\n        <div class=\"flex flex-wrap gap-12px\">\n          <SPopover v-for=\"align in aligns\" :key=\"align\" :side=\"side\" :align=\"align\">\n            <template #trigger>\n              <SButton variant=\"plain\">align: {{ align }}</SButton>\n            </template>\n            <p>Popover content</p>\n          </SPopover>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Popover Arrow\" split>\n      <SPopover show-arrow>\n        <template #trigger>\n          <SButton variant=\"plain\">with arrow</SButton>\n        </template>\n        <p>Popover content</p>\n      </SPopover>\n    </SCard>\n  </div>\n</template>\n",
  "progress": "<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue';\nimport { TransitionPresets, useTransition } from '@vueuse/core';\nimport { SCard, SProgress } from 'soy-ui';\nimport type { ThemeColor } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoProgress'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\n\nconst progress = ref(0);\n\nconst outputValue = useTransition(progress, {\n  duration: 2000,\n  transition: TransitionPresets.easeOutCubic\n});\n\nfunction start() {\n  progress.value = 66;\n}\n\nonMounted(() => {\n  start();\n});\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Color\" split>\n      <div class=\"w-320px flex flex-c gap-12px lt-sm:w-auto\">\n        <SProgress v-for=\"color in colors\" :key=\"color\" :model-value=\"outputValue\" :color=\"color\" />\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "radio": "<script setup lang=\"ts\">\nimport { SCard, SRadio, SRadioGroup } from 'soy-ui';\nimport type { RadioGroupItemProps, ThemeColor } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoRadio'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\n\nconst items = createRadioGroupItems();\n\nfunction createRadioGroupItems(): RadioGroupItemProps[] {\n  return [\n    { label: 'A', value: '1' },\n    { label: 'B', value: '2' },\n    { label: 'C', value: '3' }\n  ];\n}\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Color\" split>\n      <div class=\"flex-c gap-12px\">\n        <SRadioGroup v-for=\"color in colors\" :key=\"color\" :color=\"color\" :items=\"items\" />\n      </div>\n    </SCard>\n    <SCard title=\"Orientation: Vertical\" split>\n      <SRadioGroup orientation=\"vertical\" :items=\"items\" />\n    </SCard>\n    <SCard title=\"Disabled All\" split>\n      <SRadioGroup :items=\"items\" disabled />\n    </SCard>\n    <SCard title=\"Disabled Item\" split>\n      <SRadioGroup>\n        <SRadio v-for=\"item in items\" :key=\"item.value\" v-bind=\"item\" :disabled=\"item.value === '2'\" />\n      </SRadioGroup>\n    </SCard>\n  </div>\n</template>\n",
  "resizable": "<script setup lang=\"ts\">\nimport { SCard, SResizableHandle, SResizablePanel, SResizablePanelGroup } from 'soy-ui';\nimport { CircleDashed } from 'lucide-vue-next';\n\ndefineOptions({\n  name: 'DemoResizable'\n});\n</script>\n\n<template>\n  <SCard title=\"Resizable\" split>\n    <SResizablePanelGroup id=\"demo-group-1\" direction=\"horizontal\" class=\"max-w-md border rounded-lg\">\n      <SResizablePanel id=\"demo-panel-1\" :default-size=\"50\" :min-size=\"20\" collapsible :collapsed-size=\"10\">\n        <div class=\"h-[200px] flex items-center justify-center p-6\">\n          <span class=\"font-semibold\">One</span>\n        </div>\n      </SResizablePanel>\n      <SResizableHandle id=\"demo-handle-1\" with-handle />\n      <SResizablePanel id=\"demo-panel-2\" :default-size=\"50\" :min-size=\"20\">\n        <SResizablePanelGroup id=\"demo-group-2\" direction=\"vertical\">\n          <SResizablePanel id=\"demo-panel-3\" :default-size=\"25\" :min-size=\"25\">\n            <div class=\"h-full flex items-center justify-center p-6\">\n              <span class=\"font-semibold\">Two</span>\n            </div>\n          </SResizablePanel>\n          <SResizableHandle id=\"demo-handle-2\" with-handle>\n            <CircleDashed />\n          </SResizableHandle>\n          <SResizablePanel id=\"demo-panel-4\" :default-size=\"75\" :min-size=\"25\">\n            <div class=\"h-full flex items-center justify-center p-6\">\n              <span class=\"font-semibold\">Three</span>\n            </div>\n          </SResizablePanel>\n        </SResizablePanelGroup>\n      </SResizablePanel>\n    </SResizablePanelGroup>\n  </SCard>\n</template>\n",
  "scroll-area": "<script setup lang=\"ts\">\nimport { SCard, SScrollArea, SSeparator } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoScrollArea'\n});\n\nconst tags = Array.from({ length: 50 }).map((_, i, a) => `v1.2.0-beta.${a.length - i}`);\n\ninterface Artwork {\n  id: string;\n  artist: string;\n  art: string;\n}\n\nconst works: Artwork[] = [\n  {\n    id: '1',\n    artist: 'Ornella Binni',\n    art: 'https://images.unsplash.com/photo-1465869185982-5a1a7522cbcb?auto=format&fit=crop&w=300&q=80'\n  },\n  {\n    id: '2',\n    artist: 'Tom Byrom',\n    art: 'https://images.unsplash.com/photo-1548516173-3cabfa4607e9?auto=format&fit=crop&w=300&q=80'\n  },\n  {\n    id: '3',\n    artist: 'Vladimir Malyavko',\n    art: 'https://images.unsplash.com/photo-1494337480532-3725c85fd2ab?auto=format&fit=crop&w=300&q=80'\n  }\n];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Vertical\" split>\n      <SScrollArea orientation=\"vertical\" class=\"h-72 w-48 border rounded-md\">\n        <div class=\"p-4\">\n          <h4 class=\"mb-4 text-sm font-medium leading-none\">Tags</h4>\n          <div v-for=\"tag in tags\" :key=\"tag\">\n            <div class=\"text-sm\">{{ tag }}</div>\n            <SSeparator class=\"my-2\" />\n          </div>\n        </div>\n      </SScrollArea>\n    </SCard>\n    <SCard title=\"Horizontal\" split>\n      <SScrollArea orientation=\"horizontal\" class=\"w-96 whitespace-nowrap border rounded-md\">\n        <div class=\"w-max flex p-4 space-x-4\">\n          <div v-for=\"artwork in works\" :key=\"artwork.id\">\n            <figure class=\"shrink-0\">\n              <div class=\"overflow-hidden rounded-md\">\n                <img\n                  :src=\"artwork.art\"\n                  :alt=\"`Photo by ${artwork.artist}`\"\n                  class=\"aspect-[3/4] h-56 w-36 object-cover\"\n                />\n              </div>\n              <figcaption class=\"pt-2 text-xs text-muted-foreground\">\n                Photo by\n                <span class=\"text-foreground font-semibold\">\n                  {{ artwork.artist }}\n                </span>\n              </figcaption>\n            </figure>\n          </div>\n        </div>\n      </SScrollArea>\n    </SCard>\n  </div>\n</template>\n",
  "segment": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, SSegment } from 'soy-ui';\nimport type { SegmentOptionData } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoSegment'\n});\n\nconst day = ref('monday');\n\nconst weekends = [\n  {\n    value: 'monday',\n    label: 'Monday'\n  },\n  {\n    value: 'tuesday',\n    label: 'Tuesday'\n  },\n  {\n    value: 'wednesday',\n    label: 'Wednesday'\n  },\n  {\n    value: 'thursday',\n    label: 'Thursday'\n  },\n  {\n    value: 'friday',\n    label: 'Friday'\n  },\n  {\n    value: 'saturday',\n    label: 'Saturday'\n  },\n  {\n    value: 'sunday',\n    label: 'Sunday'\n  }\n] satisfies SegmentOptionData[];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Segment\" split>\n      <SSegment v-model=\"day\" :items=\"weekends\" />\n    </SCard>\n    <SCard title=\"Vertical\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <SSegment v-model=\"day\" :items=\"weekends\" orientation=\"vertical\" />\n      </div>\n    </SCard>\n    <SCard title=\"Custom Style\" split>\n      <SSegment\n        v-model=\"day\"\n        :items=\"weekends\"\n        :ui=\"{\n          list: 'border-border border-b bg-transparent rounded-none',\n          indicator: 'absolute bottom-0 h-2px w-full rounded-1 bg-primary'\n        }\"\n      />\n    </SCard>\n    <SCard title=\"Custom Style Vertical\" split>\n      <SSegment\n        v-model=\"day\"\n        :items=\"weekends\"\n        orientation=\"vertical\"\n        :ui=\"{\n          list: 'border-border border-l bg-transparent rounded-none',\n          indicator: 'absolute left-0 h-full w-2px rounded-1 bg-primary'\n        }\"\n      />\n    </SCard>\n  </div>\n</template>\n",
  "select": "<script setup lang=\"ts\">\nimport { SCard, SSelect } from 'soy-ui';\nimport type { SelectGroupOptionData, SelectOptionData } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoSelect'\n});\n\nconst fruits: SelectOptionData[] = createFruitItems();\n\nconst fruits2: SelectOptionData[] = fruits.map(fruit => ({ ...fruit, separator: fruit.value === 'orange' }));\n\nconst fruits3: SelectOptionData[] = fruits.map(fruit => ({ ...fruit, disabled: fruit.value === 'banana' }));\n\nfunction createFruitItems() {\n  const opts: SelectOptionData[] = [\n    { value: 'apple', label: 'Apple' },\n    { value: 'banana', label: 'Banana' },\n    { value: 'cherry', label: 'Cherry' },\n    { value: 'orange', label: 'Orange' },\n    { value: 'pear', label: 'Pear' },\n    { value: 'plum', label: 'Plum' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'watermelon', label: 'Watermelon' }\n  ];\n\n  return opts;\n}\n\nconst items: SelectGroupOptionData[] = [\n  {\n    label: 'Group 1',\n    items: [\n      { value: '1', label: 'Option 1' },\n      { value: '2', label: 'Option 2' }\n    ]\n  },\n  {\n    label: 'Group 2',\n    items: [\n      { value: '3', label: 'Option 3' },\n      { value: '4', label: 'Option 4' }\n    ]\n  }\n];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <div class=\"w-240px lt-sm:w-auto\">\n        <SSelect :items=\"fruits\" placeholder=\"Please select a fruit\" />\n      </div>\n    </SCard>\n    <SCard title=\"With default value\" split>\n      <div class=\"w-240px lt-sm:w-auto\">\n        <SSelect :items=\"fruits\" placeholder=\"Please select a fruit\" default-value=\"cherry\" />\n      </div>\n    </SCard>\n    <SCard title=\"With all separator\" split>\n      <div class=\"w-240px lt-sm:w-auto\">\n        <SSelect :items=\"fruits\" placeholder=\"Please select a fruit\" separator />\n      </div>\n    </SCard>\n    <SCard title=\"With item separator\" split>\n      <div class=\"w-240px lt-sm:w-auto\">\n        <SSelect :items=\"fruits2\" placeholder=\"Please select a fruit\" />\n      </div>\n    </SCard>\n    <SCard title=\"Disabled select\" split>\n      <div class=\"w-240px lt-sm:w-auto\">\n        <SSelect :items=\"fruits\" placeholder=\"Please select a fruit\" disabled />\n      </div>\n    </SCard>\n    <SCard title=\"Disabled option\" split>\n      <div class=\"w-240px lt-sm:w-auto\">\n        <SSelect :items=\"fruits3\" placeholder=\"Please select a fruit\" />\n      </div>\n    </SCard>\n    <SCard title=\"Group Option\" split>\n      <div class=\"w-240px lt-sm:w-auto\">\n        <SSelect :items=\"items\" placeholder=\"Please Select\" />\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "separator": "<script setup lang=\"ts\">\nimport { SCard, SSeparator } from 'soy-ui';\nimport type { SeparatorBorder, ThemeAlign } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoSeparator'\n});\n\nconst aligns: ThemeAlign[] = ['start', 'center', 'end'];\n\nconst borders: SeparatorBorder[] = ['solid', 'dashed', 'dotted'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Horizontal\">\n      <SSeparator class=\"mb-6\">Horizontal</SSeparator>\n    </SCard>\n    <SCard title=\"Vertical\">\n      <div class=\"h-5 flex-center space-x-4\">\n        <div>Soybean</div>\n        <SSeparator orientation=\"vertical\" />\n        <div>UI</div>\n        <SSeparator orientation=\"vertical\" />\n        <div>Vue</div>\n      </div>\n    </SCard>\n    <SCard title=\"Align\">\n      <SSeparator v-for=\"align in aligns\" :key=\"align\" :align=\"align\" class=\"mb-6\">{{ align }}</SSeparator>\n    </SCard>\n    <SCard title=\"Custom Align\">\n      <SSeparator class=\"mb-6\" :ui=\"{ label: 'left-1/3' }\">Custom Align</SSeparator>\n    </SCard>\n    <SCard title=\"Border\">\n      <SSeparator v-for=\"border in borders\" :key=\"border\" :border=\"border\" class=\"mb-6\">{{ border }}</SSeparator>\n    </SCard>\n    <SCard title=\"Border Width\">\n      <SSeparator border=\"solid\" class=\"mb-6 border-2px\">2 px</SSeparator>\n    </SCard>\n  </div>\n</template>\n",
  "sheet": "<script setup lang=\"ts\">\nimport { SButton, SCard, SScrollArea, SSheet } from 'soy-ui';\nimport type { SheetSide } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoSheet'\n});\n\nconst sides: SheetSide[] = ['left', 'right', 'top', 'bottom'];\n</script>\n\n<template>\n  <SCard title=\"Sheet\">\n    <div class=\"flex-c gap-4\">\n      <SCard title=\"Side\" split>\n        <div class=\"flex gap-3\">\n          <SSheet v-for=\"side in sides\" :key=\"side\" title=\"Sheet Title\" :side=\"side\">\n            <template #trigger>\n              <SButton variant=\"outline\">{{ side }}</SButton>\n            </template>\n            <div>Sheet Content</div>\n            <template #footer>\n              <SButton>Confirm</SButton>\n            </template>\n          </SSheet>\n        </div>\n      </SCard>\n      <SCard title=\"Content Scrollable\">\n        <SSheet title=\"Sheet Title\">\n          <template #trigger>\n            <SButton variant=\"outline\">Scrollable</SButton>\n          </template>\n          <SScrollArea>\n            <div v-for=\"i in 100\" :key=\"i\">Sheet Content</div>\n          </SScrollArea>\n          <template #footer>\n            <SButton>Confirm</SButton>\n          </template>\n        </SSheet>\n      </SCard>\n    </div>\n  </SCard>\n</template>\n",
  "skeleton": "<script setup lang=\"ts\">\nimport { SCard, SSkeleton } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoSkeleton'\n});\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Skeleton\" split>\n      <div class=\"flex items-center space-x-4\">\n        <SSkeleton class=\"size-12 rounded-full\" />\n        <div class=\"space-y-2\">\n          <SSkeleton class=\"h-4 w-[250px]\" />\n          <SSkeleton class=\"h-4 w-[200px]\" />\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Card\" split>\n      <div class=\"flex flex-col space-y-3\">\n        <SSkeleton class=\"h-[125px] w-[250px] rounded-xl\" />\n        <div class=\"space-y-2\">\n          <SSkeleton class=\"h-4 w-[250px]\" />\n          <SSkeleton class=\"h-4 w-[200px]\" />\n        </div>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "slider": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, SSlider } from 'soy-ui';\nimport type { ThemeColor } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoSlider'\n});\n\nconst model = ref<number[]>([33]);\n\nconst model2 = ref<number[]>([10, 60]);\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Color\" split>\n      <div class=\"w-480px flex flex-c-stretch gap-6 lt-sm:w-auto\">\n        <SSlider v-for=\"color in colors\" :key=\"color\" v-model=\"model\" :color=\"color\" :max=\"100\" :step=\"1\" />\n      </div>\n    </SCard>\n    <SCard title=\"Vertical\" split>\n      <div class=\"h-40\">\n        <SSlider v-model=\"model2\" orientation=\"vertical\" :max=\"100\" :step=\"1\" />\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "sonner": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SButton, SCard, SSelect, SonnerToaster, toast } from 'soy-ui';\nimport type { SelectOptionData, SonnerProps } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoSonner'\n});\n\nfunction openDefaultToast() {\n  toast('Event has been created');\n}\n\nfunction openInfoToast() {\n  toast.info('Event has been created');\n}\n\nfunction openSuccessToast() {\n  toast.success('Event has been created');\n}\n\nfunction openWarningToast() {\n  toast.warning('Event has been created');\n}\n\nfunction openErrorToast() {\n  toast.error('Event has been created');\n}\n\nfunction openToastWithDescription() {\n  toast('Event has been created', {\n    description: 'You can now view the event details'\n  });\n}\n\nfunction openLoadingToast() {\n  const id = toast.loading('Event has been created');\n\n  setTimeout(() => {\n    toast.dismiss(id);\n  }, 2000);\n}\n\nfunction openToastWithAction() {\n  toast('Event has been created', {\n    action: {\n      label: 'Confirm',\n      onClick: () => {\n        console.log('View event');\n      }\n    },\n    cancel: {\n      label: 'Cancel',\n      onClick: () => {\n        console.log('Cancel');\n      }\n    }\n  });\n}\n\nconst position = ref<SonnerProps['position']>('top-right');\n\nconst positionOptions: SelectOptionData[] = [\n  { label: 'Top Left', value: 'top-left' },\n  { label: 'Top Center', value: 'top-center' },\n  { label: 'Top Right', value: 'top-right' },\n  { label: 'Bottom Left', value: 'bottom-left' },\n  { label: 'Bottom Center', value: 'bottom-center' },\n  { label: 'Bottom Right', value: 'bottom-right' }\n];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SonnerToaster :position=\"position\" close-button />\n    <SCard title=\"Type\" split>\n      <div class=\"flex gap-12px\">\n        <SButton variant=\"outline\" @click=\"openDefaultToast\">Default</SButton>\n        <SButton variant=\"outline\" @click=\"openInfoToast\">Info</SButton>\n        <SButton variant=\"outline\" @click=\"openSuccessToast\">Success</SButton>\n        <SButton variant=\"outline\" @click=\"openWarningToast\">Warning</SButton>\n        <SButton variant=\"outline\" @click=\"openErrorToast\">Error</SButton>\n        <SButton variant=\"outline\" @click=\"openLoadingToast\">Loading</SButton>\n      </div>\n    </SCard>\n    <SCard title=\"With Description\" split>\n      <SButton variant=\"outline\" @click=\"openToastWithDescription\">open</SButton>\n    </SCard>\n    <SCard title=\"With Action\" split>\n      <SButton variant=\"outline\" @click=\"openToastWithAction\">open</SButton>\n    </SCard>\n    <SCard title=\"Position\" split>\n      <div class=\"w-160px\">\n        <SSelect v-model=\"position\" :items=\"positionOptions\" />\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "stepper": "<script setup lang=\"ts\">\nimport { SCard, SStepper } from 'soy-ui';\nimport type { StepperOptionData } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoStepper'\n});\n\nconst items: StepperOptionData[] = [\n  {\n    step: 1,\n    title: 'Your details',\n    description: 'Provide your name and email'\n  },\n  {\n    step: 2,\n    title: 'Company details',\n    description: 'A few details about your company'\n  },\n  {\n    step: 3,\n    title: 'Invite your team',\n    description: 'Start collaborating with your team'\n  }\n];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <SStepper :items=\"items\" />\n    </SCard>\n    <SCard title=\"Vertical\" split>\n      <SStepper :items=\"items\" orientation=\"vertical\" />\n    </SCard>\n  </div>\n</template>\n",
  "switch": "<script setup lang=\"ts\">\nimport { SCard, SSwitch } from 'soy-ui';\nimport type { ThemeColor } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoSwitch'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default Checked\" split>\n      <SSwitch default-value />\n    </SCard>\n    <SCard title=\"Color\" split>\n      <div class=\"flex gap-12px\">\n        <SSwitch v-for=\"color in colors\" :key=\"color\" default-value :color=\"color\" />\n      </div>\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <SSwitch disabled default-value color=\"success\" />\n    </SCard>\n  </div>\n</template>\n",
  "tabs": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, STabs } from 'soy-ui';\nimport type { TabsOptionData } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoTabs'\n});\n\nconst tabValue = ref('1');\nconst tabValue2 = ref('1');\nconst tabValue3 = ref('1');\n\nconst tabs = [\n  {\n    value: '1',\n    label: 'Tab 1'\n  },\n  {\n    value: '2',\n    label: 'Tab 2'\n  },\n  {\n    value: '3',\n    label: 'Tab 3'\n  }\n] satisfies TabsOptionData[];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Horizontal\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <STabs v-model=\"tabValue\" :items=\"tabs\" :ui=\"{ content: 'p-4 border border-border rounded-1' }\">\n          <template #content=\"{ value }\">\n            <div>The Tab Content: {{ value }}</div>\n          </template>\n        </STabs>\n      </div>\n    </SCard>\n    <SCard title=\"Vertical\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <STabs\n          v-model=\"tabValue2\"\n          :items=\"tabs\"\n          orientation=\"vertical\"\n          :ui=\"{ content: 'p-4 border border-border rounded-1' }\"\n        >\n          <template #content=\"{ value }\">\n            <div>The Tab Content: {{ value }}</div>\n          </template>\n        </STabs>\n      </div>\n    </SCard>\n    <SCard title=\"Fill\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <STabs v-model=\"tabValue\" :items=\"tabs\" fill=\"full\" :ui=\"{ content: 'p-4 border border-border rounded-1' }\">\n          <template #content=\"{ value }\">\n            <div>The Tab Content: {{ value }}</div>\n          </template>\n        </STabs>\n      </div>\n    </SCard>\n    <SCard title=\"Custom Style\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <STabs\n          v-model=\"tabValue3\"\n          :items=\"tabs\"\n          :ui=\"{\n            list: 'border-border border-b bg-transparent rounded-none',\n            content: 'p-4 border border-border rounded-1',\n            indicator: 'absolute bottom-0 h-2px w-full rounded-1 bg-primary'\n          }\"\n        >\n          <template #trigger=\"{ label, active }\">\n            <div :class=\"{ 'text-primary fw-bold': active }\">{{ label }}</div>\n          </template>\n          <template #content=\"{ value }\">\n            <div>The Tab Content: {{ value }}</div>\n          </template>\n        </STabs>\n      </div>\n    </SCard>\n    <SCard title=\"Custom Style Vertical\" split>\n      <div class=\"w-320px lt-sm:w-auto\">\n        <STabs\n          v-model=\"tabValue3\"\n          :items=\"tabs\"\n          orientation=\"vertical\"\n          class=\"mt-24px\"\n          :ui=\"{\n            list: 'border-border border-l bg-transparent rounded-none',\n            content: 'p-4 border border-border rounded-1',\n            indicator: 'absolute left-0 h-full w-2px rounded-1 bg-primary'\n          }\"\n        >\n          <template #trigger=\"{ label, active }\">\n            <div :class=\"{ 'text-primary fw-bold': active }\">{{ label }}</div>\n          </template>\n          <template #content=\"{ value }\">\n            <div>The Tab Content: {{ value }}</div>\n          </template>\n        </STabs>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "tags-input": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, STagsInput } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoTagsInput'\n});\n\nconst tags = ref(['Apple', 'Banana', 'Cherry']);\n</script>\n\n<template>\n  <SCard title=\"Tags Input\" split>\n    <STagsInput v-model=\"tags\" />\n  </SCard>\n</template>\n",
  "textarea": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, STextarea } from 'soy-ui';\nimport GraphemeSplitter from 'grapheme-splitter';\n\ndefineOptions({\n  name: 'DemoTextarea'\n});\n\nconst modelValue = ref<string>('');\n\nconst rows: number[] = [1, 2, 3, 4];\n\nconst wordCount = ref('soybean-ui');\nconst wordCount2 = ref('soybean-ui');\nconst wordCount3 = ref('soybean-ui');\nconst maxlengthWord = ref('1234');\n\nconst splitter = new GraphemeSplitter();\nconst countGraphemes = (text: string) => splitter.countGraphemes(text);\nconst countGraphemesWord = ref('🌷🇨🇳');\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"word count\" split>\n      <STextarea v-model=\"wordCount\" show-count />\n    </SCard>\n    <SCard title=\"word count with maxlength\" split>\n      <STextarea v-model=\"maxlengthWord\" show-count maxlength=\"6\" />\n    </SCard>\n    <SCard title=\"Count graphemes\" split>\n      <STextarea v-model=\"countGraphemesWord\" :count-graphemes=\"countGraphemes\" show-count />\n    </SCard>\n    <SCard title=\"count slot\" split>\n      <STextarea v-model=\"wordCount2\" show-count :ui=\"{ count: 'text-xl text-red right-6' }\" />\n    </SCard>\n    <SCard title=\"count slot\" split>\n      <STextarea v-model=\"wordCount3\" show-count>\n        <template #count=\"{ count }\">\n          <span>count is {{ count }}</span>\n        </template>\n      </STextarea>\n    </SCard>\n    <SCard title=\"Rows\" split>\n      <div class=\"flex-c-stretch gap-3\">\n        <STextarea\n          v-for=\"row in rows\"\n          :key=\"row\"\n          :default-value=\"`rows: ${row}`\"\n          :rows=\"row\"\n          placeholder=\"Please Input Textarea\"\n        />\n      </div>\n    </SCard>\n    <SCard title=\"Default value\" split>\n      <STextarea default-value=\"defaultModelValue\" placeholder=\"Please Input Textarea\" />\n    </SCard>\n    <SCard :title=\"`v-model : ${modelValue}`\" split>\n      <STextarea v-model=\"modelValue\" placeholder=\"Please Input Textarea\" />\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <STextarea model-value=\"the Textarea is disabled\" disabled placeholder=\"Please Input Textarea\" />\n    </SCard>\n    <SCard title=\"Resize\" split>\n      <div class=\"flex flex-c gap-6\">\n        <STextarea model-value=\"Resize None\" :resize=\"false\" />\n        <STextarea model-value=\"Resize Vertical\" resize=\"vertical\" />\n        <STextarea model-value=\"Resize Horizontal\" resize=\"horizontal\" />\n        <STextarea model-value=\"Resize Both\" resize />\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "toast": "<script setup lang=\"tsx\">\nimport { SButton, SCard, SToastAction, useToast } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoToast'\n});\n\nconst { toast } = useToast();\n\nfunction openToast() {\n  toast({\n    title: 'Hello',\n    description: 'This is a toast'\n  });\n}\n\nfunction openToastWithSuccessIcon() {\n  toast({\n    title: 'Success Icon',\n    description: 'This is a toast with success icon',\n    iconType: 'success'\n  });\n}\n\nfunction openDestructiveToast() {\n  toast({\n    title: 'Destructive',\n    description: 'This is a toast with destructive color',\n    richColor: 'destructive'\n  });\n}\n\nfunction openToastWithWarningColorAndIcon() {\n  toast({\n    title: 'Warning Icon',\n    description: 'This is a toast with warning icon',\n    iconType: 'warning',\n    richColor: 'warning'\n  });\n}\n\nfunction openToastWithAction() {\n  toast({\n    title: 'Action',\n    description: 'This is a toast with action',\n    action: <SToastAction altText=\"Click me\">Click me</SToastAction>\n  });\n}\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Default\" split>\n      <SButton variant=\"outline\" @click=\"openToast\">Open</SButton>\n    </SCard>\n    <SCard title=\"Destructive\" split>\n      <SButton variant=\"outline\" @click=\"openDestructiveToast\">Open</SButton>\n    </SCard>\n    <SCard title=\"Success Icon\" split>\n      <SButton variant=\"outline\" @click=\"openToastWithSuccessIcon\">Open</SButton>\n    </SCard>\n    <SCard title=\"With Action\" split>\n      <SButton variant=\"outline\" @click=\"openToastWithAction\">Open</SButton>\n    </SCard>\n    <SCard title=\"Warning Color And Icon\" split>\n      <SButton variant=\"outline\" @click=\"openToastWithWarningColorAndIcon\">Open</SButton>\n    </SCard>\n  </div>\n</template>\n",
  "toggle-group": "<script setup lang=\"ts\">\nimport { ref } from 'vue';\nimport { SCard, SToggleGroup } from 'soy-ui';\nimport type { ToggleGroupItemData } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoToggleGroup'\n});\n\nconst value = ref<string>('top');\n\nconst multi = ref<string[]>(['top', 'left']);\n\ninterface DemoData extends ToggleGroupItemData {\n  label: string;\n}\n\nconst items: DemoData[] = [\n  { value: 'top', label: 'Top', disabled: false },\n  { value: 'right', label: 'Right', disabled: false },\n  { value: 'bottom', label: 'Bottom', disabled: false },\n  { value: 'left', label: 'Left', disabled: false }\n];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Single\" split>\n      <SToggleGroup v-model=\"value\" :items=\"items\">\n        <template #item=\"{ label }\">{{ label }}</template>\n      </SToggleGroup>\n    </SCard>\n    <SCard title=\"Multi\" split>\n      <SToggleGroup v-model=\"multi\" :items=\"items\">\n        <template #item=\"{ label }\">{{ label }}</template>\n      </SToggleGroup>\n    </SCard>\n  </div>\n</template>\n",
  "toggle": "<script setup lang=\"ts\">\nimport { SCard, SToggle } from 'soy-ui';\nimport type { ToggleVariant } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoToggle'\n});\n\nconst variants: ToggleVariant[] = ['ghost', 'outline'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Variant\" split>\n      <div class=\"flex gap-12px\">\n        <SToggle v-for=\"variant in variants\" :key=\"variant\" :variant=\"variant\">{{ variant }}</SToggle>\n      </div>\n    </SCard>\n    <SCard title=\"Disabled\" split>\n      <div class=\"flex flex-wrap gap-12px\">\n        <SToggle size=\"md\" variant=\"ghost\" disabled>disabled</SToggle>\n        <SToggle size=\"md\" variant=\"outline\" disabled>disabled</SToggle>\n      </div>\n    </SCard>\n  </div>\n</template>\n",
  "tooltip": "<script setup lang=\"ts\">\nimport { SButton, SCard, STooltip } from 'soy-ui';\nimport type { TooltipAlign, TooltipSide } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoTooltip'\n});\n\nconst sides: TooltipSide[] = ['top', 'right', 'bottom', 'left'];\n\nconst aligns: TooltipAlign[] = ['start', 'center', 'end'];\n</script>\n\n<template>\n  <div class=\"flex-c gap-4\">\n    <SCard title=\"Tooltip Position\" split>\n      <div v-for=\"side in sides\" :key=\"side\">\n        <div class=\"py-12px text-18px\">Side: {{ side }}</div>\n        <div class=\"flex flex-wrap gap-12px\">\n          <STooltip v-for=\"align in aligns\" :key=\"align\" :side=\"side\" :align=\"align\">\n            <template #trigger>\n              <SButton variant=\"plain\">align: {{ align }}</SButton>\n            </template>\n            <p>Tooltip content</p>\n          </STooltip>\n        </div>\n      </div>\n    </SCard>\n    <SCard title=\"Tooltip Arrow\" split>\n      <STooltip show-arrow>\n        <template #trigger>\n          <SButton variant=\"plain\">with arrow</SButton>\n        </template>\n        <p>Tooltip content</p>\n      </STooltip>\n    </SCard>\n  </div>\n</template>\n",
  "button-color": "<script setup lang=\"ts\">\nimport { SButton, SCard } from 'soy-ui';\nimport type { ThemeColor } from 'soy-ui';\n\ndefineOptions({\n  name: 'DemoButtonColor'\n});\n\nconst colors: ThemeColor[] = ['primary', 'destructive', 'success', 'warning', 'info', 'carbon', 'secondary', 'accent'];\n</script>\n\n<template>\n  <SCard title=\"Color\" split>\n    <div class=\"flex flex-wrap gap-12px\">\n      <SButton v-for=\"color in colors\" :key=\"color\" :color=\"color\">{{ color }}</SButton>\n    </div>\n  </SCard>\n</template>\n"
}
